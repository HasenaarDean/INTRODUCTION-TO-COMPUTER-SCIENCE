hasenaar
313584401
Dean Hasenaar

I discussed the exercise with: No one.

=============================
=  README for ex8: Ship Game
=============================

==================
=  Description:  =
==================

from class Ship:

1.) Class representing a direction in 2D world.
    You may not change the name of any of the constants (UP, DOWN, LEFT, RIGHT,
     NOT_MOVING, VERTICAL, HORIZONTAL, ALL_DIRECTIONS), but all other
     implementations are for you to carry out.

2.) A class representing a ship in Battleship game.
    A ship is 1-dimensional object that could be laid in either horizontal or
    vertical alignment. A ship sails on its vertical\horizontal axis back and
    forth until reaching the board's boarders and then changes its direction to
    the opposite (left <--> right, up <--> down).
    If a ship is hit in one of its coordinates, it ceases its movement in all
    future turns.
    A ship that had all her coordinates hit is considered terminated

3.) A constructor for a Ship object
        :param pos: A tuple representing The ship's head's (x, y) position
        :param length: Ship's length
        :param direction: Initial direction in which the ship is sailing
        :param board_size: Board size in which the ship is sailing

4.) Return a string representation of the ship.
        :return: A tuple converted to string. The tuple's content should be (in
        the exact following order):
            1. A list of all the ship's coordinates.
            2. A list of all the ship's hit coordinates.
            3. Last sailing direction.
            4. The size of the board in which the ship is located
 
5.) Make the ship move one board unit.
        Movement is in the current sailing direction, unless such movement would
        take it outside of the board in which case the ship switches direction
        and sails one board unit in the new direction.
        the ship
        :return: A direction object representing the current movement direction.

6.) Inform the ship that a bomb hit a specific coordinate. The ship updates
         its state accordingly.
        If one of the ship's body's coordinate is hit, the ship does not move
         in future turns. If all ship's body's coordinate are hit, the ship is
         terminated and removed from the board.
        :param pos: A tuple representing the (x, y) position of the hit.
        :return: True if the bomb generated a new hit in the ship, False
         otherwise

7.) :return: True if all ship's coordinates were hit in previous turns, False
        otherwise.

8.) Check whether the ship is found in a specific coordinate.
        :param pos: A tuple representing the coordinate for check.
        :return: True if one of the ship's coordinates is found in the given
        (x, y) coordinates, False otherwise.

9.) Return ship's current positions on board.
        :return: A list of (x, y) tuples representing the ship's current
        position.

10.) Return the ship's hit positions.
        :return: A list of tuples representing the (x, y) coordinates of the
         ship which were hit in past turns (If there are no hit coordinates,
         return an empty list). There is no importance to the order of the
         values in the returned list.

11.) This function returns the ship's fixed positions as a list
        of tuples, in the same way of the function damaged_cells.

12.) Return the ship's current sailing direction.
        :return: One of the constants of Direction class :
         [UP, DOWN, LEFT, RIGHT] according to current
         sailing direction or NOT_MOVING if the ship is hit and not moving.

13.) Return the state of the given coordinate (hit\not hit)
        :param pos: A tuple representing the coordinate to query.
        :return:
            if the given coordinate is not hit : False
            if the given coordinate is hit : True
            if the coordinate is not part of the ship's body : None


from class Game: 

14.) A class representing a battleship game.
    A game is composed of ships that are moving on a square board and a user
    which tries to guess the locations of the ships by guessing their
    coordinates.

15.) Initialize a new Game object.
        :param board_size: Length of the side of the game-board
        :param ships: A list of ships that participate in the game.
        :return: A new Game object.

16.) This function returns all the ships' coordinates as a list of 
        tuples which each tuple represent the current location of each cell.

17.) This function updates all the bombs' statuses in the game which are
        in a dictionary.

18.) This function updates the ships in the game and returns the 
        current turn hits number and current turn terminations number.

19.) Note - this function is here to guide you and it is *not mandatory*
        to implement it. The logic defined by this function must be implemented
        but if you wish to do so in another function (or some other functions)
        it is ok.

        Te function runs one round of the game :
            1. Get user coordinate choice for bombing.
            2. Move all game's ships.
            3. Update all ships and bombs.
            4. Report to the user the result of current round (number of hits and
             terminated ships)
        :return:
            (some constant you may want implement which represents) Game status :
            GAME_STATUS_ONGOING if there are still ships on the board or
            GAME_STATUS_ENDED otherwise.

20.) Return a string representation of the board's game
        :return: A tuple converted to string. The tuple should contain (maintain
        the following order):
            1. Board's size.
            2. A dictionary of the bombs found on the board
                 {(pos_x, pos_y) : remaining turns}
                For example :
                 {(0, 1) : 2, (3, 2) : 1}
            3. A list of the ships found on the board (each ship should be
                represented by its __repr__ string).

21.) The main driver of the Game. Manages the game until completion.
        completion.
        :return: None

22.) Return a string representation of the boards.
    :param board_length: Length of the board size.
    :param hits: A list of tuples representing the (x, y) coordinates
    that were hit in current turn.
    :param bombs: A dictionary with tuples representing the (x, y) coordinates
    that contain active bombs as keys and an int representing the numbers of
    turns remaining for the current bomb (1-3) as values.
    :param hit_ships: A list of tuples representing the (x, y) coordinates
    in which there are hit ships' body.
    :param ships: A list of tuples representing the (x, y) coordinates
    of ships (that are *not* hit).
    :param debug: If true - print all ships and their body (even those that are
    not hit). If False - print only hit coordinates.
    :return: None

======================
=  Special Comments  =
======================


